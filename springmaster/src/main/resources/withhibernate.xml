<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<context:property-placeholder location="classpath*:/appConfig.properties" />



	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"> 
		<!-- 设置JDBC驱动名称 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<!-- 设置JDBC连接URL -->
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test" />
		<!-- 设置数据库用户名 -->
		<property name="user" value="root" />
		<!-- 设置数据库密码 -->
		<property name="password" value="qy04qy15" />
		<!-- 设置连接池初始值 -->
		<property name="initialPoolSize" value="5" />
	</bean>
	<!-- 配置sessionFactory  -->
	     
	<bean   id="sessionFactory"  
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 数据源  -->
		<property   name="dataSource"   ref="dataSource"   />
		<!-- hibernate的相关属性配置  -->
		<property   name="hibernateProperties">
			<value>
				 <!-- 设置数据库方言  -->
				 hibernate.dialect=org.hibernate.dialect.MySQLDialect                
				 <!-- 设置自动创建|更新|验证数据库表结构  -->
				 hibernate.hbm2ddl.auto=update                
				 <!-- 是否在控制台显示sql  -->
				hibernate.show_sql=true 
				 <!-- 是否格式化sql，优化显示  -->
				 hibernate.format_sql=true                 
				<!-- 是否开启二级缓存  -->
				 hibernate.cache.use_second_level_cache=false                 
				<!-- 是否开启查询缓存  -->
				 hibernate.cache.use_query_cache=false                
				 <!-- 数据库批量查询最大数  -->
				 hibernate.jdbc.fetch_size=50 
				<!-- 数据库批量更新、添加、删除操作最大数  -->
				hibernate.jdbc.batch_size=50               
				 <!-- 是否自动提交事务  -->
				 hibernate.connection.autocommit=true 
				 <!-- 指定hibernate在何时释放JDBC连接  -->
				 hibernate.connection.release_mode=auto 
				 <!-- 创建session方式 hibernate4.x 的方式  -->
				 hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext 
				 <!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包   
					所以把它设置为none即可  -->
				 javax.persistence.validation.mode=none  
			</value>
			         
		</property>
		<!-- 自动扫描实体对象 tdxy.bean的包结构中存放实体类  -->
		<property   name="packagesToScan"   value="tdxy.bean"   />
	</bean>

	<!-- 定义事务管理  -->
	<bean   id="transactionManager"  
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property   name="sessionFactory"   ref="sessionFactory"   />
	</bean>

	<!-- 定义 Autowired  自动注入 bean  -->
	 
	<context:annotation-config />

	 <!-- 扫描有注解的文件  base-package 包路径  -->
	<context:component-scan  
		base-package="com.agilejerry.springmaster" />
	<context:component-scan  
		base-package="com.agilejerry.springmaster.impl" />

	<tx:advice   id="txAdvice"   transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式REQUIRED：指定当前方法必需在事务环境中运行，如果当前有事务环境就加入当前正在执行的事务环境，  如果当前没有事务，就新建一个事务。 这是默认值。                -->
			<tx:method   name="create*"   propagation="REQUIRED"   />
			<tx:method   name="save*"   propagation="REQUIRED"   />
			<tx:method   name="add*"   propagation="REQUIRED"   />
			<tx:method   name="update*"   propagation="REQUIRED"   />
			<tx:method   name="remove*"   propagation="REQUIRED"   />
			<tx:method   name="del*"   propagation="REQUIRED"   />
			<tx:method   name="import*"   propagation="REQUIRED"   />
			<!-- 指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。                  查询定义即可  
				read-only="true"  表示只读               -->
			<tx:method   name="*"   propagation="NOT_SUPPORTED"  
				read-only="true"   />
		</tx:attributes>
	</tx:advice>

	<!-- 定义切面，在 * tdxy.*.service.*ServiceImpl.*(..) 中执行有关的hibernate session的事务操作  -->
	<aop:config>
		<aop:pointcut   id="serviceOperation"  
			expression="execution(* tdxy.*.service.*Service.*(..))"   />
		<aop:advisor   advice-ref="txAdvice"   pointcut-ref="serviceOperation"   />
	</aop:config>
</beans>